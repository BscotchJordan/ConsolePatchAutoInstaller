"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.array = exports.arraySortNumericDescending = exports.arraySortNumeric = exports.arrayUntouch = exports.selfOrFirstItem = exports.arrayValuesAreDecreasing = exports.valuesAreDecreasing = exports.arrayValuesAreIncreasing = exports.valuesAreIncreasing = exports.arrayEachTruthyComparedToLast = exports.eachTruthyComparedToLast = exports.arrayTouch = exports.wrapIfNotArray = void 0;
/**
 * If the provided value is not an array,
 * wrap it in an array. If the value is undefined
 * will return an empty array.
 */
function wrapIfNotArray(item) {
    if (Array.isArray(item)) {
        // @ts-expect-error Help! Does work, but Typescript doesn't like it.
        return item;
    }
    // @ts-expect-error Help! Does work, but Typescript doesn't like it.
    return typeof item == 'undefined' ? [] : [item];
}
exports.wrapIfNotArray = wrapIfNotArray;
/** @alias wrapIfNotArray */
exports.arrayTouch = wrapIfNotArray;
/**
 * Return `true` if the `comparison` function returns true
 * when applied to each adjacent pair of values. For example,
 * can be used to determine if an array of numbers is increasing
 * with `(current,last)=>current>last`.
 */
function eachTruthyComparedToLast(arrayOfComparables, comparison) {
    return arrayOfComparables.every((value, i) => {
        if (i === 0) {
            return true;
        }
        return comparison(value, arrayOfComparables[i - 1]);
    });
}
exports.eachTruthyComparedToLast = eachTruthyComparedToLast;
/** @alias eachTruthyComparedToLast */
exports.arrayEachTruthyComparedToLast = eachTruthyComparedToLast;
/**
 * Return true if each value is greater than the last
 */
function valuesAreIncreasing(increasingArray) {
    return eachTruthyComparedToLast(increasingArray, (curr, last) => curr > last);
}
exports.valuesAreIncreasing = valuesAreIncreasing;
/** @alias valuesAreIncreasing */
exports.arrayValuesAreIncreasing = valuesAreIncreasing;
/**
 * Return true if each value is greater than the last
 */
function valuesAreDecreasing(decreasingArray) {
    return eachTruthyComparedToLast(decreasingArray, (curr, last) => curr < last);
}
exports.valuesAreDecreasing = valuesAreDecreasing;
/** @alias valuesAreDecreasing */
exports.arrayValuesAreDecreasing = valuesAreDecreasing;
/**
 * If not an array, return self. Otherwise return 0th item.
 */
function selfOrFirstItem(items) {
    if (items instanceof Array) {
        // @ts-expect-error can't figure out how to get this to behave,
        // but it does work as intended!
        return items[0];
    }
    // @ts-expect-error (see prior comment)
    return items;
}
exports.selfOrFirstItem = selfOrFirstItem;
/** @alias selfOrFirstItem */
exports.arrayUntouch = selfOrFirstItem;
function sortResult(numbersOrArrayItem1, array2ItemOrDescending, descending = false) {
    if (typeof numbersOrArrayItem1 == 'number') {
        if (typeof array2ItemOrDescending != 'number') {
            throw new Error('Second argument must be a number');
        }
        const diff = numbersOrArrayItem1 - array2ItemOrDescending;
        // @ts-ignore
        return descending ? -diff : diff;
    }
    else if (Array.isArray(numbersOrArrayItem1)) {
        // @ts-ignore
        return numbersOrArrayItem1.sort((a, b) => sortResult(a, b, descending));
    }
    throw new Error('Invalid arguments for arraySortNumeric');
}
function arraySortNumeric(numbersOrArrayItem1, array2Item) {
    // @ts-ignore
    return sortResult(numbersOrArrayItem1, array2Item);
}
exports.arraySortNumeric = arraySortNumeric;
function arraySortNumericDescending(numbersOrArrayItem1, array2Item) {
    // @ts-ignore
    return sortResult(numbersOrArrayItem1, array2Item, true);
}
exports.arraySortNumericDescending = arraySortNumericDescending;
exports.array = {
    arrayTouch: exports.arrayTouch,
    arrayEachTruthyComparedToLast: exports.arrayEachTruthyComparedToLast,
    arrayUntouch: exports.arrayUntouch,
    arrayValuesAreDecreasing: exports.arrayValuesAreDecreasing,
    arrayValuesAreIncreasing: exports.arrayValuesAreIncreasing,
    arraySortNumeric,
    arraySortNumericDescending,
    eachTruthyComparedToLast,
    selfOrFirstItem,
    valuesAreDecreasing,
    valuesAreIncreasing,
    wrapIfNotArray,
};
//# sourceMappingURL=array.js.map