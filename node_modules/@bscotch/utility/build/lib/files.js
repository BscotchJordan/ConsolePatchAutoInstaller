"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.files = exports.removeEmptyDirsSync = exports.listFilesByExtensionSync = exports.listFilesSync = exports.listFoldersSync = exports.listPathsSync = void 0;
const fs_1 = __importDefault(require("fs"));
const path_1 = __importDefault(require("path"));
const paths_1 = require("./paths");
/**
 * List all files and folders in a directory. If `dir` is a
 * path, return it in an array.
 */
function listPathsSync(dir, recursive = false, options) {
    if (fs_1.default.statSync(dir).isFile()) {
        return [dir];
    }
    else if (!fs_1.default.existsSync(dir)) {
        return [];
    }
    const excludedDirs = [];
    if (!(options === null || options === void 0 ? void 0 : options.includeDotGit)) {
        excludedDirs.push('.git');
    }
    if (!(options === null || options === void 0 ? void 0 : options.includeNodeModules)) {
        excludedDirs.push('node_modules');
    }
    const paths = fs_1.default
        .readdirSync(dir)
        .filter((aPath) => !excludedDirs.includes(path_1.default.basename(aPath)))
        .map((aPath) => path_1.default.join(dir, aPath));
    if (recursive) {
        const morePaths = paths
            .filter((path) => fs_1.default.statSync(path).isDirectory())
            .map((dir) => listPathsSync(dir, true))
            .flat(3);
        paths.push(...morePaths);
    }
    return paths_1.sortedPaths(paths);
}
exports.listPathsSync = listPathsSync;
/**
 * List all folders in a directory.
 */
function listFoldersSync(dir, recursive = false, options) {
    return listPathsSync(dir, recursive, options).filter((pathName) => fs_1.default.statSync(pathName).isDirectory());
}
exports.listFoldersSync = listFoldersSync;
/**
 * List all files in a directory or, if 'dir' is already a file,
 * just return that filename as an array.
 */
function listFilesSync(dir, recursive = false, options) {
    if (fs_1.default.statSync(dir).isFile()) {
        return [dir];
    }
    return listPathsSync(dir, recursive, options).filter((filePath) => fs_1.default.statSync(filePath).isFile());
}
exports.listFilesSync = listFilesSync;
/**
 * List all files in a directory or, if 'dir' is already a file,
 * just return that filename as an array.
 */
function listFilesByExtensionSync(dir, extension, recursive = false, options) {
    const extensions = Array.isArray(extension) ? extension : [extension];
    return listFilesSync(dir, recursive, options).filter((fileName) => {
        const ext = path_1.default.parse(fileName).ext.slice(1);
        return extensions.includes(ext);
    });
}
exports.listFilesByExtensionSync = listFilesByExtensionSync;
/**
 * Find and delete all empty directories.
 */
function removeEmptyDirsSync(startDir, options) {
    const folders = listFoldersSync(startDir, true);
    if (!(options === null || options === void 0 ? void 0 : options.excludeRoot)) {
        folders.unshift(startDir);
    }
    folders.reverse();
    for (const folder of folders) {
        try {
            fs_1.default.rmdirSync(folder);
        }
        catch { }
    }
}
exports.removeEmptyDirsSync = removeEmptyDirsSync;
exports.files = {
    listFilesByExtensionSync,
    listFilesSync,
    listFoldersSync,
    listPathsSync,
    removeEmptyDirsSync,
};
//# sourceMappingURL=files.js.map