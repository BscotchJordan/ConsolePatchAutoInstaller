"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.dates = exports.dateSortDescending = exports.chronologySortReverse = exports.dateSort = exports.chronologySort = exports.dateIsLessThan = exports.dateIsGreaterThan = exports.dateIsInThePast = exports.dateIsInTheFuture = exports.dateIsOlderThanDaysAgo = exports.dateIsOlderThanHoursAgo = exports.dateIsOlderThanMinutesAgo = exports.dateIsOlderThanSecondsAgo = exports.dateIsOlderThanMillisAgo = exports.dateDifferenceDays = exports.dateDifferenceHours = exports.dateDifferenceMinutes = exports.dateDifferenceSeconds = exports.dateDifferenceMillis = exports.dateAssertIsValid = exports.assertValidDate = exports.dateIsValid = exports.isValidDate = void 0;
const errors_1 = require("./errors");
function isValidDate(date) {
    var _a;
    return date instanceof Date && !isNaN((_a = date === null || date === void 0 ? void 0 : date.getTime) === null || _a === void 0 ? void 0 : _a.call(date));
}
exports.isValidDate = isValidDate;
/** @alias isValidDate */
exports.dateIsValid = isValidDate;
function assertValidDate(date) {
    errors_1.assert(isValidDate(date), `${date} is not a date`);
}
exports.assertValidDate = assertValidDate;
/** @alias assertValidDate */
exports.dateAssertIsValid = assertValidDate;
/** Positive if date2 is in the past. */
function dateDifferenceMillis(date1, date2) {
    return date1.getTime() - date2.getTime();
}
exports.dateDifferenceMillis = dateDifferenceMillis;
/** Positive if date2 is in the past. */
function dateDifferenceSeconds(date1, date2) {
    return dateDifferenceMillis(date1, date2) / 1000;
}
exports.dateDifferenceSeconds = dateDifferenceSeconds;
/** Positive if date2 is in the past. */
function dateDifferenceMinutes(date1, date2) {
    return dateDifferenceSeconds(date1, date2) / 60;
}
exports.dateDifferenceMinutes = dateDifferenceMinutes;
/** Positive if date2 is in the past. */
function dateDifferenceHours(date1, date2) {
    return dateDifferenceMinutes(date1, date2) / 60;
}
exports.dateDifferenceHours = dateDifferenceHours;
/** Positive if date2 is in the past. */
function dateDifferenceDays(date1, date2) {
    return dateDifferenceHours(date1, date2) / 24;
}
exports.dateDifferenceDays = dateDifferenceDays;
function dateIsOlderThanMillisAgo(date, millisAgo) {
    return dateDifferenceMillis(new Date(), date) > millisAgo;
}
exports.dateIsOlderThanMillisAgo = dateIsOlderThanMillisAgo;
function dateIsOlderThanSecondsAgo(date, secondsAgo) {
    return dateIsOlderThanMillisAgo(date, secondsAgo * 1000);
}
exports.dateIsOlderThanSecondsAgo = dateIsOlderThanSecondsAgo;
function dateIsOlderThanMinutesAgo(date, minutes = 1) {
    return dateIsOlderThanSecondsAgo(date, 60 * minutes);
}
exports.dateIsOlderThanMinutesAgo = dateIsOlderThanMinutesAgo;
function dateIsOlderThanHoursAgo(date, hours = 1) {
    return dateIsOlderThanMinutesAgo(date, 60 * hours);
}
exports.dateIsOlderThanHoursAgo = dateIsOlderThanHoursAgo;
function dateIsOlderThanDaysAgo(date, days = 1) {
    return dateIsOlderThanHoursAgo(date, 24 * days);
}
exports.dateIsOlderThanDaysAgo = dateIsOlderThanDaysAgo;
function dateIsInTheFuture(date) {
    const nowInMilliseconds = Date.now();
    date = new Date(date);
    assertValidDate(date);
    const dateInMilliseconds = (date && date.getTime && date.getTime()) || 0;
    return dateInMilliseconds > nowInMilliseconds;
}
exports.dateIsInTheFuture = dateIsInTheFuture;
function dateIsInThePast(date) {
    return dateIsOlderThanSecondsAgo(date, 0);
}
exports.dateIsInThePast = dateIsInThePast;
function dateIsGreaterThan(date, otherDate) {
    assertValidDate(date);
    assertValidDate(otherDate);
    return date > otherDate;
}
exports.dateIsGreaterThan = dateIsGreaterThan;
function dateIsLessThan(date, otherDate) {
    assertValidDate(date);
    assertValidDate(otherDate);
    return date < otherDate;
}
exports.dateIsLessThan = dateIsLessThan;
function chronologySort(date1, date2) {
    assertValidDate(date1);
    assertValidDate(date2);
    return date1.getTime() - date2.getTime();
}
exports.chronologySort = chronologySort;
/** @alias chronologySort */
exports.dateSort = chronologySort;
function chronologySortReverse(date1, date2) {
    return chronologySort(date2, date1);
}
exports.chronologySortReverse = chronologySortReverse;
/** @alias chronologySortReverse */
exports.dateSortDescending = chronologySortReverse;
exports.dates = {
    dateSort: exports.dateSort,
    dateSortDescending: exports.dateSortDescending,
    dateDifferenceMillis,
    dateDifferenceSeconds,
    dateDifferenceMinutes,
    dateDifferenceHours,
    dateDifferenceDays,
    dateIsGreaterThan,
    dateIsInTheFuture,
    dateIsInThePast,
    dateIsLessThan,
    dateIsOlderThanMillisAgo,
    dateIsOlderThanSecondsAgo,
    dateIsOlderThanMinutesAgo,
    dateIsOlderThanHoursAgo,
    dateIsOlderThanDaysAgo,
    dateIsValid: exports.dateIsValid,
    dateAssertIsValid: exports.dateAssertIsValid,
    isValidDate,
    assertValidDate,
    chronologySort,
    chronologySortReverse,
};
//# sourceMappingURL=dates.js.map