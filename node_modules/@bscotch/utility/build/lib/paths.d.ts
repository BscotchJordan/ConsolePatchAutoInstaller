/**
 * Pass to `.sort()` got an array of paths to get
 * them sorted by *least* to *most* specific (i.e.
 * fewest to most subdirs) and alphabetically by
 * directory within a specificity tier.
 */
declare function pathSpecificitySort(path1: string, path2: string): number;
/**
 * Sort paths alphabetically, *by directory*.
 * Returns a sorted copy of the paths array.
 */
export declare function sortedPaths(paths: string[]): string[];
/**
 * Given a path, return all of the parent paths
 * leading up to it.
 *
 * @example
 * `parentPaths('/hello/world/')->['/','/hello','hello/world','hello/world/']`
 */
export declare function parentPaths(path: string): string[];
/**
 * Given a path with any style of separators,
 * return the same path with POSIX-style separators.
 */
export declare function toPosixPath(pathString: string): string;
export declare const paths: {
    parentPaths: typeof parentPaths;
    pathSpecificitySort: typeof pathSpecificitySort;
    sortedPaths: typeof sortedPaths;
    toPosixPath: typeof toPosixPath;
};
export {};
//# sourceMappingURL=paths.d.ts.map