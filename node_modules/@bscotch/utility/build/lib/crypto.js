"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.crypto = exports.decrypt = exports.encrypt = exports.md5 = exports.sha256 = exports.sha1 = exports.createHash = void 0;
const crypto_1 = __importDefault(require("crypto"));
const errors_1 = require("./errors");
function createHash(algorithm, source, encoding = 'hex') {
    return (crypto_1.default
        .createHash(algorithm)
        .update(source)
        // @ts-ignore
        .digest(encoding));
}
exports.createHash = createHash;
function sha1(source, encoding = 'hex') {
    return createHash('sha1', source, encoding);
}
exports.sha1 = sha1;
function sha256(source, encoding = 'hex') {
    return createHash('sha256', source, encoding);
}
exports.sha256 = sha256;
function md5(source, encoding = 'hex') {
    return createHash('md5', source, encoding);
}
exports.md5 = md5;
const ivLength = 16; // required for AES
const encoding = 'base64';
const algorithm = 'aes-256-cbc';
/**
 * Create a strong encryption of some source data using AES256-CBC
 */
function encrypt(text, key) {
    errors_1.assert(key.length == 32, 'Key must be length 32');
    const iv = crypto_1.default.randomBytes(ivLength);
    const cipher = crypto_1.default.createCipheriv(algorithm, key, iv);
    const encrypted = Buffer.concat([cipher.update(text), cipher.final()]);
    return `${iv.toString(encoding)}:${encrypted.toString(encoding)}`;
}
exports.encrypt = encrypt;
/**
 * Decrypt something encrypted using the sibling 'encrypt' function.
 */
function decrypt(encryptionString, key) {
    errors_1.assert(key.length == 32, 'Key must be length 32');
    const [iv, encrypted] = encryptionString
        .split(':')
        .map((string) => Buffer.from(string, encoding));
    const decipher = crypto_1.default.createDecipheriv(algorithm, Buffer.from(key), iv);
    const decrypted = Buffer.concat([
        decipher.update(encrypted),
        decipher.final(),
    ]);
    return decrypted;
}
exports.decrypt = decrypt;
exports.crypto = {
    createHash,
    decrypt,
    encrypt,
    md5,
    sha1,
    sha256,
};
//# sourceMappingURL=crypto.js.map