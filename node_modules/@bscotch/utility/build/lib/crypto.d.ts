/// <reference types="node" />
import { BinaryLike, Encoding } from 'crypto';
export declare function createHash(algorithm: string, source: BinaryLike, encoding?: Encoding): Buffer & string;
export declare function sha1(source: BinaryLike, encoding?: Encoding): Buffer & string;
export declare function sha256(source: BinaryLike, encoding?: Encoding): Buffer & string;
export declare function md5(source: BinaryLike, encoding?: Encoding): Buffer & string;
/**
 * Create a strong encryption of some source data using AES256-CBC
 */
export declare function encrypt(text: string | Buffer, key: string): string;
/**
 * Decrypt something encrypted using the sibling 'encrypt' function.
 */
export declare function decrypt(encryptionString: string, key: string): Buffer;
export declare const crypto: {
    createHash: typeof createHash;
    decrypt: typeof decrypt;
    encrypt: typeof encrypt;
    md5: typeof md5;
    sha1: typeof sha1;
    sha256: typeof sha256;
};
//# sourceMappingURL=crypto.d.ts.map