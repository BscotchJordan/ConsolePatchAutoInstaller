export declare type EmptyArray = [];
export declare type HttpMethod = 'GET' | 'POST' | 'PATCH' | 'PUT' | 'DELETE' | 'HEAD' | 'OPTIONS';
export declare type PartialBy<T, K extends keyof T> = Omit<T, K> & Partial<Pick<T, K>>;
export declare type RequiredBy<T, K extends keyof T> = Omit<T, K> & Required<Pick<T, K>>;
export declare type UnwrappedPromise<T> = T extends PromiseLike<infer U> ? UnwrappedPromise<U> : T;
export declare type AnyFunction = (...args: any[]) => any;
export declare type Nullish = null | undefined;
export declare type NotNullish<T> = Exclude<T, Nullish>;
export declare type NotNull<T> = Exclude<T, null>;
export declare type Defined<T> = Exclude<T, undefined>;
export declare type ExtractKeysByValue<Container, ValueTypeFilter> = {
    [Key in keyof Container]-?: Container[Key] extends Function ? ValueTypeFilter extends Container[Key] ? Key : never : Container[Key] extends ValueTypeFilter ? Key : never;
}[keyof Container];
export declare type ExcludeKeysByValue<Container, ValueTypeFilter> = Exclude<keyof Container, ExtractKeysByValue<Container, ValueTypeFilter>>;
export declare type PickByValue<Container, ValueTypeFilter> = Pick<Container, ExtractKeysByValue<Container, ValueTypeFilter>>;
export declare type OmitByValue<Container, ValueTypeFilter> = Omit<Container, ExtractKeysByValue<Container, ValueTypeFilter>>;
//# sourceMappingURL=types.d.ts.map